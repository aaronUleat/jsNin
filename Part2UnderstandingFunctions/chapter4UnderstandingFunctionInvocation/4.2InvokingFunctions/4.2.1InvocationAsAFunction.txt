INVOCACION COMO FUNCION

Como el llamado de la funcion es aplicado, la invocacion del operarador de la funcion. que
tonto pensar de otra manera. Pero en la realidad, decimos que la invocacion de la funcion
para distinguir de el otro mecanismos de invocacion: metodos, constructures, y
apply/call. Si una funcion no es invocada como un metodo, como un constructor, o via
apply or call, es invocada como una funcion.
Este tipo de invocacion ocurre cuando una funcion es invocada usando el operador (), y la exprecion
en la cual el () operador es aplicado no referencia la funcion como una propiedad de un objeto.
(En ese caso, tenemos el la invocacion por un metodo, pero discutimos eso despues). Aqui
hay algunos ejemplos.

// Una funcion declarada invocada como una funcion
function ninja(){};
ninja();

// Una funcion expresada invocada como una funcion
var samurai = function() {};
samurai();

// Una funcion expresada inmediatamente como una funcion
(function(){})();

Cuando invocamos en esta manera, el contexto de la funcion, (el valor de 'this') puede ser
dos cosas: En un modo no estricto, va a referirse al contexto global (el objeto window),
mientras que en el modo estricto, va  a dar como resultado undefined

El siguiente listing Ilustra la diferencia en el comportamiento entre el modo estricto
y el no estricto

LISTING 4.5 INVOCATTION AS A FUNCTION

function ninja() {
	return this;
}

function samurai() {
	"use strict";
	return this;
}

assert(ninja() === window,
"In a nonstrict ninja function, " +
"The context is the global window objet");

assert(samurai() === undefined,
"In a strict samurai function" +
"the context is undefined");

NOTA: Como usted puede ver, el modo estricto es, en la mayoria de los casos, mas directo
que el modo no estricto. Por ejemplo en el Listing 4.5 invoca a una funcion como una
funcion (como opuesto a un metodo) No ha especificado un objeto en el cual la funcion
deba ser invocada. Entonces, en nuestra opinion, tiene mas sentido que la palabra
'this' deba ser setiada como undefined (como en el modo estricto), como en el modo opuesto
al objeto global (en el modo no estricto). En general, el modo estricto arregla muchas
de las rarezas de javascript (Recuerde la alianza de argumentos como al inicio del capitulo).


















