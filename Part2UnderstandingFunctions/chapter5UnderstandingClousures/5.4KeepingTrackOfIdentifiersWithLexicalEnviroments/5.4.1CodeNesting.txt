CODE NESTING.

"Ambientes Lexicos" estan basados fuertemente en codigo anidado, el cual permite a una estructura de codigo
a ser contenida dentro de otra. El figure 5.8 muestra varios tipos de code nesting.

var ninja = "Muneyoshi";
// La funcion skulk esta contenida dentro del scope global
function skulk() {
    var action = skulking;
    // La funcion report esta anidada dentro de la funcion skulk
    function report() {
        var reportNum = 3;
        // El for loop esta anidado dentro de la funcion report
        for(var i = 0; i <= reportNum; i++) {
            console.log(ninja + " " + action + " " + i);
        }
    }
    report();
}
skulk();

En este ejemplo, podemos ver lo siguiente:
    * El foor loop esta anidado dentro de la funcion report.
    * La funcion report esta anidada dentro de la funcion skulk.
    * La funcion skulk esta anidada dentro del scope global.

En terminos de scopes, cada de estas estructuras de codigo se asocia a un "Ambiente Lexico" cada
tiempo que el codigo es evaluado. Por ejemplo, en cada invocacion de la funcion skulk, en cada
invocacion de la funcion skulk, un nuevo "ambiente lexico" de la funcion es creado.
En adicion es importante enfatizar que una estructura interna de codigo tiene acceso a las variables
definidas en el codigo fuera de la estructura interna; por ejemplo; el loop for puede accesar las
variables de la funcion report, de la funcion skulk, y las del codigo global; y la funcion skulk solo
puede accesar variables adicionales del codigo global.
No hay nada especial acerca de este tipo de acceso de variables; todo lo que tenemos problablemente es
algo que hemos hecho muchas veces. Pero como hace el motor de javascript mantiene el rastro de todas
las variables, y que es accesible desde donde? Esto es cuando el "ambiente lexico" entra en el juego.